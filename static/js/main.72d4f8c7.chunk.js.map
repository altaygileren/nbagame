{"version":3,"sources":["components/player.card.js","components/score.js","App.js","serviceWorker.js","index.js"],"names":["Playercard","props","number","className","alt","player","first_name","last_name","src","images","default","url","reveal","fppg","toFixed","onClick","playerSelected","Score","score","App","componentDidMount","a","axios","get","then","res","randomize","data","players","catch","err","console","log","setState","shuffle","setPlayers","state","playerOne","playerTwo","playerSelect","checkScores","that","Math","max","revealStat","setTimeout","setScore","revealStats","alert","this","bottom","Container","Row","Col","xl","lg","md","sm","xs","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.72d4f8c7.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Playercard(props) {\n\tconst roundDownPoints = number => {\n\t\tlet zero = 0\n\t\tif (number != null) {\n\t\t\treturn number.toFixed(2)\n\t\t} else {\n\t\t\treturn zero\n\t\t}\n\t}\n\treturn (\n\t\t<div className='player-card-div'>\n\t\t\t<div>\n\t\t\t\t<img\n\t\t\t\t\talt={`${props.player.first_name} ${props.player.last_name}`}\n\t\t\t\t\tclassName='player-img'\n\t\t\t\t\tsrc={props.player.images.default.url}\n\t\t\t\t/>\n\t\t\t\t<p>\n\t\t\t\t\t{props.player.first_name} {props.player.last_name}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t{props.reveal ? (\n\t\t\t\t\t<span className='player-points'>\n\t\t\t\t\t\t{roundDownPoints(props.player.fppg)}\n\t\t\t\t\t</span>\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName='select-btn'\n\t\t\t\t\t\t\tonClick={() => props.playerSelected(props)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSelect\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import React from 'react'\n\nexport default function Score(props) {\n\treturn <div className='score-div'>{props.score}</div>\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport axios from 'axios'\nimport shuffle from 'shuffle-array'\nimport Playercard from './components/player.card'\nimport Score from './components/score'\nimport Fade from 'react-reveal/Fade'\n\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tplayers: [],\n\t\t\tplayerOne: { images: { default: { url: '' } } },\n\t\t\tplayerTwo: { images: { default: { url: '' } } },\n\t\t\tscore: 0,\n\t\t\tplayerSelect: { first_name: '' },\n\t\t\trevealStats: false,\n\t\t}\n\t}\n\n\tcomponentDidMount = async () => {\n\t\tawait axios\n\t\t\t.get(\n\t\t\t\t'https://gist.githubusercontent.com/liamjdouglas/bb40ee8721f1a9313c22c6ea0851a105/raw/6b6fc89d55ebe4d9b05c1469349af33651d7e7f1/Player.json'\n\t\t\t)\n\t\t\t.then(res => this.randomize(res.data.players))\n\t\t\t.catch(err => console.log(err))\n\t}\n\n\trandomize = players => {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tplayers: shuffle(players),\n\t\t\t},\n\t\t\t() => this.setPlayers(this.state.players[0], this.state.players[1])\n\t\t)\n\t}\n\n\tsetPlayers = (playerOne, playerTwo) => {\n\t\tthis.setState({\n\t\t\tplayerOne,\n\t\t\tplayerTwo,\n\t\t})\n\t}\n\n\tplayerSelected = player => {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tplayerSelect: player.player,\n\t\t\t},\n\t\t\t() => this.checkScores(this.state.playerSelect)\n\t\t)\n\t}\n\n\tcheckScores = async player => {\n\t\tlet { playerOne, playerTwo, players } = this.state\n\t\tlet that = this\n\t\tlet higherScore = Math.max(playerOne.fppg, playerTwo.fppg)\n\t\tif (higherScore === player.fppg) {\n\t\t\tthis.revealStat()\n\t\t\tsetTimeout(() => {\n\t\t\t\tthat.setScore()\n\t\t\t}, 3000)\n\t\t} else {\n\t\t\tthis.randomize(players)\n\t\t}\n\t}\n\n\trevealStat = () => {\n\t\tthis.setState({ revealStats: true })\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ revealStats: false })\n\t\t}, 3000)\n\t}\n\n\tsetScore = () => {\n\t\tlet { players } = this.state\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tscore: this.state.score + 1,\n\t\t\t},\n\t\t\t() => this.randomize(players)\n\t\t)\n\n\t\tif (this.state.score >= 10) {\n\t\t\talert('YOU WIN')\n\t\t}\n\t}\n\n\trender() {\n\t\tlet { playerOne, playerTwo, revealStats } = this.state\n\t\tif (!playerOne && !playerTwo) {\n\t\t\treturn <span>Loading</span>\n\t\t}\n\t\treturn (\n\t\t\t<div className='gameDiv'>\n\t\t\t\t<Fade bottom>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<div className='gameTitleDiv'>\n\t\t\t\t\t\t\t<h3 className='gameTitle'>NBA Player Game</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col xl={6} lg={6} md={6} sm={6} xs={6}>\n\t\t\t\t\t\t\t\t<Playercard\n\t\t\t\t\t\t\t\t\treveal={revealStats}\n\t\t\t\t\t\t\t\t\tplayerSelected={this.playerSelected}\n\t\t\t\t\t\t\t\t\tplayer={playerOne}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col xl={6} lg={6} md={6} sm={6} xs={6}>\n\t\t\t\t\t\t\t\t<Playercard\n\t\t\t\t\t\t\t\t\treveal={revealStats}\n\t\t\t\t\t\t\t\t\tplayerSelected={this.playerSelected}\n\t\t\t\t\t\t\t\t\tplayer={playerTwo}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Score score={this.state.score} />\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Container>\n\t\t\t\t</Fade>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}